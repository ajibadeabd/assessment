swagger: "2.0"
info:
  version: "1.0.0"
  title: "Auth API"
  description: "API for user authentication"
basePath: "/api"
schemes:
  - "http"
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  /auth/register:
    post:
      summary: "Create a new user"
      tags:
        - "Auth"
      parameters:
        - name: "body"
          in: "body"
          description: "User object"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "johndoe@example.com"
              password:
                type: "string"
                example: "password123"
      responses:
        200:
          description: "User created successfully"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"
  /auth/login:
    post:
      summary: "Authenticate a user"
      tags:
        - "Auth"
      parameters:
        - name: "body"
          in: "body"
          description: "User credentials"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "johndoe@example.com"
              password:
                type: "string"
                example: "password123"
      responses:
        200:
          description: "User authenticated successfully"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /comment/{tweetId}:
    post:
      summary: "Create a new comment"
      tags:
        - "Comment"
      parameters:
        - name: "tweetId"
          in: "path"
          description: "ID of the tweet to comment on"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "Comment object"
          required: true
          schema:
            type: "object"
            properties:
              content:
                type: "string"
                example: "This is my comment"
      security:
        - Bearer: []
      responses:
        200:
          description: "Comment created successfully"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
  /tweet/{tweetId}:
    delete:
      summary: "Delete a tweet"
      tags:
        - "Tweet"
      parameters:
        - name: "tweetId"
          in: "path"
          description: "ID of the tweet to be deleted"
          required: true
          type: "string"
      security:
        - Bearer: []
      responses:
        200:
          description: "Tweet deleted successfully"
        401:
          description: "Unauthorized"
        404:
          description: "Tweet not found"
        500:
          description: "Internal server error"
  /tweet:
    post:
      summary: "Create a new tweet"
      tags:
        - "Tweet"
      parameters:
        - name: "body"
          in: "body"
          description: "Tweet object"
          required: true
          schema:
            type: "object"
            properties:
              content:
                type: "string"
                example: "This is a sample tweet"
          name: "tweet"
      security:
        - Bearer: []
      responses:
        200:
          description: "Tweet created successfully"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"

  /tweet/all:
     get:
      summary: "Get all tweets"
      tags:
        - "Tweet"
      security:
        - Bearer: []
      responses:
        200:
          description: "List of all tweets"
        500:
          description: "Internal server error"